cbase_root = ARGUMENTS.get('src', 'c_base')
output_root = ARGUMENTS.get('output', 'bin')
template_root = ARGUMENTS.get('templates', f'{cbase_root}/template')
solver = ARGUMENTS.get('solver')
if solver == 'ssa':
    solver_path = 'ssa_cpp_solver'
elif solver == 'ode':
    solver_path = 'ode_cpp_solver'
elif solver == 'tau':
    solver_path = 'tau_leaping_cpp_solver'
elif solver == 'hybrid':
    solver_path = 'tau_hybrid_cpp_solver'
elif solver is None:
    raise Error('Required argument: `solver`')
else:
    raise Error(f'Invalid `solver`: {solver}')

VariantDir(output_root, cbase_root, duplicate=False)
VariantDir(f'{output_root}/template', template_root, duplicate=False)

env = Environment(CPPPATH=[
    Dir(cbase_root),
    Dir(template_root),
], LIBPATH=[
    Dir(output_root),
    Dir(f'{output_root}/{solver_path}'),
])
Export('env')

SConscript(f'{output_root}/SConscript', duplicate=False)
SConscript(f'{output_root}/ssa_cpp_solver/SConscript', duplicate=False)
env.Program(f'{output_root}/SSASimulation', f'{output_root}/template/template.cpp', LIBS=['gpyssa', 'gpystd'])
